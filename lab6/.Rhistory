input_table <- read.csv(file = "C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab8/Lab8_Data.csv",
sep = ",", header = TRUE, dec = ',')
# Описание
definitions <- read.csv(file = "C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab8/Lab8_Definition and Source.csv",
sep = ",", header = TRUE, dec = ',')
View(input_table)
# Данные по Индии
india <- subset(input_table, Country.Code == "IND")
# Индия
# Приведение датасета к необходимому формату
years <- c(1989:2017)
ind <- c("GDP", "GDP growth", "Births", "Birth rate", "Adjusted income", "Unemployment advanced", 'Unemployment basic', "Imports of goods", "Industry", "Government health",
"Life expectancy", "Population", "Government expenditure", "Goods imports", "Exports of goods",
"Death rate", "Educational total", "Educational female", "High-technology exports", " Best industry", "Scientific articles")
indicators <- india[,3]
india <- india[-c(8,9),-c(1,2,3,4,34)]
# Преобразование в числовой тип
india <- sapply(india, as.numeric)
# Транспонирование
india <- t(india)
View(india)
rownames(india) <- years
colnames(india) <- ind
india <- data.frame(india)
# График распределения ВВП по годам
plot(years, india[,1], main="Прирост ВВП", xlab='Годы',
ylab='ВВП (в долларах)', type='o', pch=20)
# Корреляционная матрица (учитываются все полные наблюдения для каждой пары переменных в отдельности)
cor(india, use="pairwise.complete.obs")
# Визуализация корреляционной матрицы
library(corrplot)
# Ellipses
corrplot(cor(india, use="everything"),mar = c(2, 1, 3, 1), method = "ellipse",tl.cex = 0.6,add = FALSE)
# Корреляция роста ВВП и прироста населения
cor(india$GDP, india$Population)
plot(india$GDP, india$Population, main='Зависимость популяции от ВВП',
xlab="Прирост ВВП", ylab="Популяция")
# Корреляция прироста населения на динамику безработицы
cor(india$Population, india$Unemployment.basic, use='pairwise.complete.obs')
plot(india$Population, india$Unemployment.basic,
main="Корреляция прироста населения на динамику безработицы",
xlab="Популяция", ylab="Безработица")
# Корреляция расходов на медицину на увеличение продолжительности жизни
cor(india$Government.health, india$Life.expectancy, use="pairwise.complete.obs")
plot(india$Government.health, india$Life.expectancy,
main="Корреляция расходов на медицину на увеличение продолжительности жизни",
xlab='Расходы на медицину', ylab="Продолжительность жизни")
# Корреляция расходов на медицину на смертность
cor(india$Government.health, india$Death.rate, use="pairwise.complete.obs")
plot(india$Government.health, india$Death.rate,
main="Корреляция расходов на медицину на смертность",
xlab="Расходы на медицину", ylab="Смертность")
library(car)
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=4)
model <- lm(india$Life.expectancy ~ india$GDP + I(india$GDP^2), india)
model
summary(model)
plot(india$Life.expectancy ~ india$GDP)
abline(model)
lines(india$GDP, fitted(model))
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=4)
View(india)
# Удалим строки, где есть пустые значения в весе
india[india == ""] <- NA # Пустые значение, сделали NA
india <- india[rowSums(is.na(india[,1:6])) == 0,]
india <- india[rowSums(is.na(india)) == 0,]
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=4)
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=2)
View(india)
input_table <- read.csv(file = "C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab8/Lab8_Data.csv",
sep = ",", header = TRUE, dec = ',')
# Описание
definitions <- read.csv(file = "C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab8/Lab8_Definition and Source.csv",
sep = ",", header = TRUE, dec = ',')
# Данные по Индии
india <- subset(input_table, Country.Code == "IND")
# Индия
# Приведение датасета к необходимому формату
years <- c(1989:2017)
ind <- c("GDP", "GDP growth", "Births", "Birth rate", "Adjusted income", "Unemployment advanced", 'Unemployment basic', "Imports of goods", "Industry", "Government health",
"Life expectancy", "Population", "Government expenditure", "Goods imports", "Exports of goods",
"Death rate", "Educational total", "Educational female", "High-technology exports", " Best industry", "Scientific articles")
indicators <- india[,3]
india <- india[-c(8,9),-c(1,2,3,4,34)]
# Преобразование в числовой тип
india <- sapply(india, as.numeric)
# Транспонирование
india <- t(india)
rownames(india) <- years
colnames(india) <- ind
india <- data.frame(india)
# График распределения ВВП по годам
plot(years, india[,1], main="Прирост ВВП", xlab='Годы',
ylab='ВВП (в долларах)', type='o', pch=20)
# Корреляционная матрица (учитываются все полные наблюдения для каждой пары переменных в отдельности)
cor(india, use="pairwise.complete.obs")
# Визуализация корреляционной матрицы
library(corrplot)
# Ellipses
corrplot(cor(india, use="everything"),mar = c(2, 1, 3, 1), method = "ellipse",tl.cex = 0.6,add = FALSE)
# Корреляция роста ВВП и прироста населения
cor(india$GDP, india$Population)
plot(india$GDP, india$Population, main='Зависимость популяции от ВВП',
xlab="Прирост ВВП", ylab="Популяция")
# Корреляция прироста населения на динамику безработицы
cor(india$Population, india$Unemployment.basic, use='pairwise.complete.obs')
plot(india$Population, india$Unemployment.basic,
main="Корреляция прироста населения на динамику безработицы",
xlab="Популяция", ylab="Безработица")
# Корреляция расходов на медицину на увеличение продолжительности жизни
cor(india$Government.health, india$Life.expectancy, use="pairwise.complete.obs")
plot(india$Government.health, india$Life.expectancy,
main="Корреляция расходов на медицину на увеличение продолжительности жизни",
xlab='Расходы на медицину', ylab="Продолжительность жизни")
# Корреляция расходов на медицину на смертность
cor(india$Government.health, india$Death.rate, use="pairwise.complete.obs")
plot(india$Government.health, india$Death.rate,
main="Корреляция расходов на медицину на смертность",
xlab="Расходы на медицину", ylab="Смертность")
library(car)
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=4)
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=2)
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=2)
scatterplotMatrix(india[,c(1,4,7,11,12)], spread=FALSE, lty.smooth=4)
warnings()
scatterplotMatrix(india[,c(1,4,8,11,12)], spread=FALSE, lty.smooth=4)
scatterplotMatrix(india[,c(1,4,8,11,12)], spread=FALSE, lty.smooth=2)
scatterplotMatrix(india[,c(1,4,8,11,12)], spread=FALSE, lty.smooth=4)
View(india)
# Корреляция прироста населения на динамику безработицы
cor(india$Population, india$Unemployment.basic, use='pairwise.complete.obs')
plot(india$Population, india$Unemployment.basic,
main="Корреляция прироста населения на динамику безработицы",
xlab="Популяция", ylab="Безработица")
# Корреляция расходов на медицину на увеличение продолжительности жизни
cor(india$Government.health, india$Life.expectancy, use="pairwise.complete.obs")
plot(india$Government.health, india$Life.expectancy,
main="Корреляция расходов на медицину на увеличение продолжительности жизни",
xlab='Расходы на медицину', ylab="Продолжительность жизни")
model <- lm(india$Life.expectancy ~ india$GDP + I(india$GDP^2), india)
model
summary(model)
summary(model)
plot(india$Life.expectancy ~ india$GDP)
abline(model)
#График полиномиальной регрессии
lines(india$GDP, fitted(model))
summary(model)
library("xlsx")
airplan_crushes <- read.csv('C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab6/Airplane_Crashes.csv', sep = ",") # Считали базу данных
library("xlsx")
airplan_crushes <- read.csv('C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab6/Airplane_Crashes.csv', sep = ",") # Считали базу данных
names_cols_airplan_crushes <- c("Дата", "Время", "Место крушения", "Компания",
"Полет", "Рейс", "Самолет", "Бортовой номер",
"Заводской серийный номер", "Находилось на борту",
"Cмертельные случаи на борту", "Убитые при приземлении",
"Описание крушения") # Название столбцов
colnames(airplan_crushes) <- names_cols_airplan_crushes # Присвоили имена столбикам
airplan_crushes[airplan_crushes == ""] <- NA # Пустые значение, сделали NA
# Удалим строки, где есть пустые значения
airplan_crushes <- airplan_crushes[rowSums(is.na(airplan_crushes[,])) == 0,]
airplan_crushes <- airplan_crushes[800:944,]
# Стандартизация переменных
airplane_N <- airplan_crushes[,c(10,11,12)]
maxs <- apply(airplane_N, 2, max) # Максимальное значение
mins <- apply(airplane_N, 2, min) # Минимальное значение
airplane_N <- scale(airplane_N, center = mins, scale = maxs - mins)
# Матрица попарных расстояний
dist.airplan_crushes <- dist(airplane_N)
# Проводим кластерный анализ, результаты записываем в список clust.airplan_crushes
clust.airplan_crushes <- hclust(dist.airplan_crushes, "ward.D")
labels <- airplan_crushes[,7]
# Дендрограмма
plot(clust.airplan_crushes, labels, cex=0.5, main="Дендрограмма кластеров",
xlab="Самолеты")
# целесообразно разделить ее на 3 кластера.
rect.hclust(clust.airplan_crushes, k=3, border="red")
# Разбиение дендрограммы на кластеры
groups <- cutree(clust.airplan_crushes, k = 3)
airplan_crushes[groups==1, 7]
airplan_crushes[groups==2, 7]
airplan_crushes[groups==3, 7]
#par(mar = c(4, 5, 6, 4))
# Вычисляем среднее значение показателей в каждом кластере
#  в 1-ом кластере
g1<-colMeans(airplan_crushes[groups==1,10:12])
#  во 2-ом кластере
g2<-colMeans(airplan_crushes[groups==2,10:12])
#  в 3-ем кластере
g3<-colMeans(airplan_crushes[groups==3,10:12])
# Построение столбчатой диаграммы
df <- data.frame(g1,g2,g3)
rownames(df) <- names_cols_airplan_crushes[10:12]
colnames(df) <- c("Количество людей на борту больше 20", "Количество людей на борту до 20", "Большое количество жертв при приземление")
barplot(data.matrix(df), main="Группы самолетов", col=rainbow(3), ylim = c(0,150), beside = TRUE)
legend("topright", names_cols_airplan_crushes[10:12], col=rainbow(3), lwd=5, bty = "n",  y.intersp = 0.8, text.width = 6)
# Каменная осыпь
plot(1:144, clust.airplan_crushes$height, type='b', main = "Диаграмма каменная осыпь")
library(lattice)
# Двумерные диаграммы рассеяния
xyplot(airplan_crushes[,10] ~ airplan_crushes[,11], airplan_crushes, main='Зависимость количества людей на борту от летальных случаев на борту',
xlab='Смертельные случаи на борту', ylab='Находились на борту',  auto.key = TRUE, groups = groups)
xyplot(
airplan_crushes$`Находилось на борту` ~ airplan_crushes$`Cмертельные случаи на борту` | groups,
layout = c(3, 1),               # panel with ncol = 3 and nrow = 1
group = groups, data = airplan_crushes,
type = c("p", "smooth"),        # Show points and smoothed line
scales = "free"                 # Make panels axis scales independent
)
# Двумерные диаграммы рассеяния
xyplot(airplan_crushes[,10] ~ airplan_crushes[,11], airplan_crushes, main='Зависимость количества людей на борту от летальных случаев на борту',
xlab='Смертельные случаи на борту', ylab='Находились на борту',  auto.key = TRUE, groups = groups)
library("xlsx")
airplan_crushes <- read.csv('C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab6/Airplane_Crashes.csv', sep = ",") # Считали базу данных
View(airplan_crushes)
names_cols_airplan_crushes <- c("Дата", "Время", "Место крушения", "Компания",
"Полет", "Рейс", "Самолет", "Бортовой номер",
"Заводской серийный номер", "Находилось на борту",
"Cмертельные случаи на борту", "Убитые при приземлении",
"Описание крушения") # Название столбцов
colnames(airplan_crushes) <- names_cols_airplan_crushes # Присвоили имена столбикам
airplan_crushes[airplan_crushes == ""] <- NA # Пустые значение, сделали NA
# Удалим строки, где есть пустые значения
airplan_crushes <- airplan_crushes[rowSums(is.na(airplan_crushes[,])) == 0,]
airplan_crushes <- airplan_crushes[800:944,]
# Нормализация2 переменных
airplane_N <- airplan_crushes[,c(10,11,12)]
maxs <- apply(airplane_N, 2, max) # Максимальное значение
mins <- apply(airplane_N, 2, min) # Минимальное значение
airplane_N <- scale(airplane_N, center = mins, scale = maxs - mins)
# Матрица попарных расстояний
dist.airplan_crushes <- dist(airplane_N)
# Проводим кластерный анализ, результаты записываем в список clust.airplan_crushes
clust.airplan_crushes <- hclust(dist.airplan_crushes, "ward.D")
labels <- airplan_crushes[,7]
# Дендрограмма
plot(clust.airplan_crushes, labels, cex=0.5, main="Дендрограмма кластеров",
xlab="Самолеты")
# целесообразно разделить ее на 3 кластера.
rect.hclust(clust.airplan_crushes, k=3, border="red")
# Разбиение дендрограммы на кластеры
groups <- cutree(clust.airplan_crushes, k = 3)
airplan_crushes[groups==1, 7]
airplan_crushes[groups==2, 7]
airplan_crushes[groups==3, 7]
#par(mar = c(4, 5, 6, 4))
# Вычисляем среднее значение показателей в каждом кластере
#  в 1-ом кластере
g1<-colMeans(airplan_crushes[groups==1,10:12])
#  во 2-ом кластере
g2<-colMeans(airplan_crushes[groups==2,10:12])
#  в 3-ем кластере
g3<-colMeans(airplan_crushes[groups==3,10:12])
# Построение столбчатой диаграммы
df <- data.frame(g1,g2,g3)
rownames(df) <- names_cols_airplan_crushes[10:12]
colnames(df) <- c("Количество людей на борту больше 20", "Количество людей на борту до 20", "Большое количество жертв при приземление")
barplot(data.matrix(df), main="Группы самолетов", col=rainbow(3), ylim = c(0,150), beside = TRUE)
legend("topright", names_cols_airplan_crushes[10:12], col=rainbow(3), lwd=5, bty = "n",  y.intersp = 0.8, text.width = 6)
# Считывание олимпийцев
olympics <- read.csv(file = "C:/Users/kosty/OneDrive/Документы/GitHub/Big_Data_R/lab7/athlete_events.csv",
sep = ",", header = TRUE, dec = ',')
# Спортсмены по гимнастике
gymnastics_athlets <- subset(olympics, Sport == 'Gymnastics')
# Удалим строки, где есть пустые значения в весе
gymnastics_athlets[gymnastics_athlets == ""] <- NA # Пустые значение, сделали NA
gymnastics_athlets <- gymnastics_athlets[rowSums(is.na(gymnastics_athlets[,1:6])) == 0,]
# Убрали повторяющиеся строки со спортсменами
gymnastics_athlets <- gymnastics_athlets %>% group_by(ID) %>% filter (! duplicated(ID))
library(dplyr)
# Убрали повторяющиеся строки со спортсменами
gymnastics_athlets <- gymnastics_athlets %>% group_by(ID) %>% filter (! duplicated(ID))
# Выбрали мужчин
gymnastics_athlets_man <- gymnastics_athlets[gymnastics_athlets$Sex == 'M',]
# Вес спортсменов
weight <- as.numeric(gymnastics_athlets_man$Weight)
# Гистограмма веса
hist(weight, main='Вес спорсменов',
xlab='Вес', ylab='Частота',xlim = c(40,90))
# Проверка выборки на нормальность распределения с помощью Квантильно-квантильного графика
# (показывает распределение данных относительно ожидаемого нормального распределения)
qqnorm(weight)
qqline(weight, col='blue', lwd = 5)
# Доверительные интервалы
library(car)
qqPlot(weight)
# Тест Стьюдента
t.test(weight, mu=65)
# Тест Стьюдента
t.test(weight, mu=63.2)
# Гистограмма веса
hist(weight, main='Вес спорсменов',
xlab='Вес', ylab='Частота',xlim = c(40,90))
# Тест Шапиро-Уилкса для проверки на нормальность
shapiro.test(weight[1:4999])
# Тест Уилкоксона
wilcox.test(weight, mu=65, conf.int = TRUE)
# Тест Стьюдента
t.test(weight, mu=63)
# Выборка гимнастов и атлетов
gymnastics_athletics_men <- subset(olympics, Sex == 'M' & (Sport == 'Gymnastics' | Sport == 'Athletics'))
# Удалим строки, где есть пустые значения в весе
gymnastics_athletics_men[gymnastics_athletics_men == ""] <- NA # Пустые значение, сделали NA
gymnastics_athletics_men <- gymnastics_athletics_men[rowSums(is.na(gymnastics_athletics_men[,1:6])) == 0,]
# Убрали повторяющиеся строки со спортсменами
gymnastics_athletics_men <- gymnastics_athletics_men %>% group_by(ID) %>% filter (! duplicated(ID))
weight_gymnastics_athletics_men <- as.numeric(gymnastics_athletics_men$Weight)
# Гистограмма веса
hist(weight_gymnastics_athletics_men, main='Гистограмма веса гимнастов и атлетов', xlab='Вес', xlim = c(40,150), ylim = c(0,5000))
# Гистограмма веса
hist(weight_gymnastics_athletics_men, main='Гистограмма веса гимнастов и атлетов', xlab='Вес', xlim = c(40,150), ylim = c(0,5000))
